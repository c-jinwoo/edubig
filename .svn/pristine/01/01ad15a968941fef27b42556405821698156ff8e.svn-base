package com.webapp.academy.ctrl;

import java.io.PrintWriter;
import java.util.HashMap;
import java.util.Map;
import java.util.Properties;
import java.util.Random;

import javax.annotation.Resource;
import javax.mail.Session;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;

import com.google.gson.Gson;
import com.sangs.support.DataMap;
import com.sangs.support.FrontException;
import com.sangs.support.SangsProperties;
import com.sangs.util.SangsCryptUtil;
import com.webapp.academy.service.BoardService;
import com.webapp.academy.service.CommonService;
import com.webapp.academy.util.MyAuthentication;

import javax.mail.*;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;

/**
 * Description : 사용자 메인 관련 컨트롤러
 *
 * Modification Information
 * 수정일			수정자			수정내용
 * -------		-----------------------------------
 * 2020.09.29	CSLAB		최초작성
 *
 */
@Controller
public class MainController {

    private Logger log = LogManager.getLogger(this.getClass());
    
    @Resource(name = "commonService")
    private CommonService    commonService;

    @Resource(name = "boardService")
    private BoardService     boardService;

    /**
     * 메인 페이지
     * (사용)
     * @param request
     * @param model
     * @param rMap
     * @return
     * @throws FrontException
     */
    // TODO: 메인페이지
    @RequestMapping(value = "/ccedu/main/main.do")
    public String main(HttpServletRequest request, HttpServletResponse res, DataMap rMap) throws FrontException {
    	String returnJsp = "";
        try {        	
            // 신용교육 ( 공지사항 )
            rMap.putString("bcateno", SangsProperties.getProperty("Globals.bbsBcateSiteNotice"));
            request.setAttribute("noticeList", boardService.getLateBoardList(rMap));
            
            // 신용교육 ( 지식자료실 )
            rMap.putString("bcateno", SangsProperties.getProperty("Globals.bbsBcateSiteDataRoom"));
            request.setAttribute("dataRoomList", boardService.getLateBoardList(rMap));
            
            // 국가공인 신용상담사 ( 공지사항 )
            rMap.putString("bcateno", SangsProperties.getProperty("Globals.bbsBcateSiteCceduNotice"));
            request.setAttribute("cceduNoticeList", boardService.getLateBoardList(rMap));
            
            // 국가공인 신용상담사 ( 자료실 )
            rMap.putString("bcateno", SangsProperties.getProperty("Globals.bbsBcateSiteCceduDataRoom"));
            request.setAttribute("cceduDataRoomList", boardService.getLateBoardList(rMap));

            // 팝업
            request.setAttribute("noticePopList", boardService.getMainPopBoardViewNew(rMap));
                        
            // 배너
            request.setAttribute("bannerList", boardService.getBannerList(rMap));
            rMap.setString("title", SangsProperties.getProperty("Globals.academyMain"));
            request.setAttribute("REQUEST_DATA", rMap);
            returnJsp = "ccedu/main/main" ;

        }
        catch(Exception e) { 
        	log.debug(e.getMessage());
            throw new FrontException(e);
        }
        return returnJsp;
    }	
	 private char[] ranChar = { 
		'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 
		'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 
		'u', 'v', 'w', 'x', 'y', 'z', '0', '1', '2', '3', 
		'4', '5', '6', '7', '8', '9' };
	 public String getRandomStr(int len){
	    String str = "";
	
	    for(int i = 0; i < len; i++){
	    	str = str + this.ranChar[getRanIdx()];
	    }	
	    return str;
	  }
	
	  private int getRanIdx(){
	    int ran = 0;
	    Random r = new Random();
	    ran = Math.abs(r.nextInt(this.ranChar.length));
	    return ran;
	  }
	
    /**)
     * @param request
     * @param model
     * @param rMap
     * @return
     * @throws FrontException
     */
    @RequestMapping(value = "/ccedu/user/ajaxMemberCheck.do")
    public void ajaxMemberCheck(HttpServletRequest request, HttpServletResponse res, DataMap rMap) throws Exception{
    	res.setContentType("text/html; charset=utf-8");
        PrintWriter out = res.getWriter();
        Gson gson = new Gson();
        String json = null;

        Map<String,Object> resultMap = new HashMap<String,Object>();
      
    	String checkMberInfo =  commonService.check(rMap);
    	
    	if(checkMberInfo != null) {
    		final String FROM = "cslabskr2020@gmail.com";
    	    final String FROMNAME = "CSLAB";
    	    FROMNAME.getBytes("UTF-8");
    	    final String TO = rMap.getString("email");
    	    int PORT = 587;
    	    
    	    String SUBJECT = "온라인 교육 사이트 회원 아이디 검색 결과입니다.";
    	    
    	    String BODY = String.join(
	    	        System.getProperty("line.separator"),
	    	        "<h3>회원 아이디</h3>",
	    	        "회원님의 아이디는",
	    	        checkMberInfo,
	    	        "입니다."
	    	);    	    
    	    String pw = "pw";
    	    String pass = "";
    	    
    	    if(rMap.getString("findType").equals(pw)) {
        	    int chkPw = commonService.checkPw(rMap);
        	    
        	    if(chkPw > 0) {	    	
        	    	
        	    	
        	    	SUBJECT = "온라인 교육 사이트 회원 비밀번호 검색 결과입니다.";
        	    	
        	    	pass = this.getRandomStr(6);
        	    	
        	    	BODY = String.join(
        	    	        System.getProperty("line.separator"),
        	    	        "<h3>회원 비밀번호</h3>",
        	    	        "회원님의 비밀번호는",
        	    	        pass,
        	    	        "입니다."
        	    	);
        	    	
        	    } else {
        	    	resultMap.put("result", "FAIL");
        	        json = gson.toJson(resultMap);
        	        out.print(json);
        	    	return;
        	    }
    	    }    		
    	    Properties props = System.getProperties();
            props.put("mail.smtp.port", PORT); 
            props.put("mail.smtp.starttls.enable", "true");
            props.put("mail.smtp.auth", "true");      
            props.put("mail.smtp.host", "smtp.gmail.com");
            
            Authenticator auth = new MyAuthentication();
            Session session = Session.getInstance(props, auth);
            MimeMessage msg = new MimeMessage(session);
     
            try {
                msg.setFrom(new InternetAddress(FROM, FROMNAME));
                msg.setRecipient(Message.RecipientType.TO, new InternetAddress(TO));
                msg.setSubject(SUBJECT, "UTF-8");
                msg.setContent(BODY, "text/html;charset=euc-kr");
                javax.mail.Transport.send(msg);

                if(rMap.getString("findType").equals(pw)) {
                	int chkPw = commonService.checkPw(rMap);
                	if(chkPw > 0) { 
            	    	rMap.putString("pass", SangsCryptUtil.crypt(pass));

            	    	commonService.changePw(rMap);
                	}
                }
            } catch (Exception ex) {
                ex.printStackTrace();     
            } 
    		resultMap.put("result", "SUCCESS");
        	
    	} else {
    		resultMap.put("result", "FAIL");
    	} 
    	
        json = gson.toJson(resultMap);
        out.print(json);
    }
}
