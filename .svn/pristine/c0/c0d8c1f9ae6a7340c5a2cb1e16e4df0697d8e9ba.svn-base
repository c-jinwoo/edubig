// 버튼 생성
// input
//  $target : 해당 버튼
//  text : 타이틀
//  tab : depth
//  func : 버튼 작동 함수
function setButton($target, text, tab, func)
{
  $target.attr("title", text);
  $target.attr("tabIndex", tab);
  $target.off().on('click', function() {
	//$(this).blur();
	try { func(); }
	catch(exception) { console.log("The function is not registered."); }
  });
  $target.on('mouseenter', function() {
    $(this).addClass("hover");
    $(this).closest("div").children(".tooltips").addClass("hover");
  });
  $target.on('mouseleave focusout', function() {
    $(this).removeClass("hover");
    $(this).closest("div").children(".tooltips").removeClass("hover");
  });

}
// 타이틀 생성
// input
//  $target : 해당 버튼
//  text : 타이틀
//  tab : depth
function setTitle($target, text, tab){
  $target.attr("title", text);
  $target.attr("tabIndex", tab);
}

//비디오가 처음 시작할때 호출되는 함수
function videoStart(){
  _this.$media.css("display","block");
 // _this.$media.get(0).play();
  $("body").css("background","#ffffff");
}


//타임라인 마우스오버체크
// input
//  bolTemp : true = hover클래스 추가 / false = hover 클래스 제거
function lineHover(_bolTemp){
if(_bolTemp){
  _this.$timeLine.addClass("hover");
  _this.$timeProgress.addClass("hover");
}
else {
  _this.$timeLine.removeClass("hover");
  _this.$timeProgress.removeClass("hover");
}
}

//사운드 조절
function setVolume(_vol){
  _this.$media.get(0).volume = _vol;
  _this.$soundProgress.css("width",_vol.toFixed(5) * 45);
  if(_this.$media.get(0).volume!=0)
    _this.$sound.find("button").removeClass("toggle");
  else
    _this.$sound.find("button").addClass("toggle");
}

function getURL(_lastIndex)
{
  var url = document.location.href.split("/");
  return url[url.length - _lastIndex - 1].split(".")[0];
}

// 디지털 시간 변환
// input
//  time : 미디어 시간
// ouput
//  digital: 디지털시간 00 : 00
function clock(_time)
{
  if(_time == "undefined" || _time == undefined || _time == "NaN" || _time == NaN) return "00:00";
  var min = Math.floor(_time / 60);
  var sec = Math.floor(_time % 60);
  var digital = itostr(min) + ":" + itostr(sec);
  return digital;
}

// 디지털을 초로 변환
// input
//  time : 미디어 시간
// ouput
//  secTime : 초 시간
function secClock(_time)
{
  try {
    var min =_time.split(":")[0]
    var sec =_time.split(":")[1]
    var secTime = (min * 60) + (sec * 1);
    return secTime;
  }
  catch(exception) { console.log("markerArr_Time is not registered. "); }
}

// i to str
function itostr(_num)
{
  return _num < 10 ? "0" + _num : _num;
}

// os 탐지
function getOSType()
{
  var ua = navigator.userAgent;

  if (ua.indexOf("Windows NT 5.1") != -1) return "windows_xp";
  if (ua.indexOf("Windows NT 6.1") != -1) return "windows_7";
  if (ua.indexOf("Windows NT 6.2") != -1) return "windows_8";
  if (ua.indexOf("Windows NT 6.3") != -1) return "windows_8.1";
  if (ua.indexOf("Windows NT 10.0") != -1) return "windows_10";
  if (ua.indexOf("Windows") != -1) return "windows";

  if (ua.indexOf("Android") != -1) return "Android OS";
  if (ua.indexOf("iPhone") != -1) return "iPhone OS";
  if (ua.indexOf("iPad") != -1) return "iPad";
}
// Browser 탐지
function getBrowserType()
{
   var _ua = navigator.userAgent;
    /* IE7,8,9,10,11 */
    if (navigator.appName == 'Microsoft Internet Explorer' || _ua.indexOf("rv:11.0") != -1) {
        var rv = -1;
        var trident = _ua.match(/Trident\/(\d.\d)/i);

        //ie11에서는 MSIE토큰이 제거되고 rv:11 토큰으로 수정됨 (Trident표기는 유지)
        if(trident != null && trident[1]  == "7.0") return rv = "IE" + 11;
        if(trident != null && trident[1]  == "6.0") return rv = "IE" + 10;
        if(trident != null && trident[1]  == "5.0") return rv = "IE" + 9;
        if(trident != null && trident[1]  == "4.0") return rv = "IE" + 8;
        if(trident == null) return rv = "IE" + 7;

        var re = new RegExp("MSIE ([0-9]{1,}[\.0-9]{0,})");
        if (re.exec(_ua) != null) rv = parseFloat(RegExp.$1)
        return rv;
    }

    /* etc */
    var agt = _ua.toLowerCase();
    if (agt.indexOf("chrome") != -1) return 'Chrome';
    if (agt.indexOf("opera") != -1) return 'Opera';
    if (agt.indexOf("staroffice") != -1) return 'Star Office';
    if (agt.indexOf("webtv") != -1) return 'WebTV';
    if (agt.indexOf("beonex") != -1) return 'Beonex';
    if (agt.indexOf("chimera") != -1) return 'Chimera';
    if (agt.indexOf("netpositive") != -1) return 'NetPositive';
    if (agt.indexOf("phoenix") != -1) return 'Phoenix';
    if (agt.indexOf("firefox") != -1) return 'Firefox';
    if (agt.indexOf("safari") != -1) return 'Safari';
    if (agt.indexOf("skipstone") != -1) return 'SkipStone';
    if (agt.indexOf("netscape") != -1) return 'Netscape';
    if (agt.indexOf("mozilla/5.0") != -1) return 'Mozilla';
}

function resizing(div, proportional) {        
	var currentWidth = div.outerWidth();
	var currentHeight = div.outerHeight();
	
	var availableHeight = window.innerHeight;
	var availableWidth = window.innerWidth;

	var scaleX = availableWidth / currentWidth;
	var scaleY = availableHeight / currentHeight;

	if (proportional) {
		scaleX = Math.min(scaleX, scaleY);
		scaleY = scaleX;
	}

	var translationX = Math.round((availableWidth - (currentWidth * scaleX)) / 2);
	var translationY = Math.round((availableHeight - (currentHeight * scaleY)) / 2);       

	div.css({
		"position":"absolute",
		"left": "0px",
		"top": "0px",
		"-webkit-transform": "translate(" + translationX + "px, "
										   + 0 + "px) scale3d("
										   + scaleX + ", " + scaleY + ", 1)",
		"-moz-transform": "translate(" + translationX + "px, "
										   + 0 + "px) scale3d("
										   + scaleX + ", " + scaleY + ", 1)",
		"-ms-transform": "translate(" + translationX + "px, "
										   + 0 + "px) scale3d("
										   + scaleX + ", " + scaleY + ", 1)",
		"-o-transform": "translate(" + translationX + "px, "
										   + 0 + "px) scale3d("
										   + scaleX + ", " + scaleY + ", 1)",
		"transform": "translate(" + translationX + "px, "
										   + 0 + "px) scale3d("
										   + scaleX + ", " + scaleY + ", 1)",                                  
		"-webkit-transform-origin": "0 0",
		"-moz-transform-origin":"0 0",
		"-ms-transform-origin":"0 0",
		"-o-transform-origin":"0 0",
		"transform-origin":"0 0"
	});
} 

/**
  * startContent		시작 시 호출 함수
 */
function startContent()
{
	appSetPage(parseInt(_this.$curPageNumber, 10));
}

/**
 * endContent		종료 시 호출 함수
 */
function endContent()
{

}

//====================================================================================================//
// 중앙공무원교육원 LMS API
//----------------------------------------------------------------------------------------------------//

/**
 * fnSetPage	현재 페이지 저장 함수
 * @param _page 현재 페이지
 */
function appSetPage(_page) {
	if (bolPorted) parent.setPage(_page);
}

/**
 * setValue	특정 값 저장 함수
 * @param _element	해쉬
 * @param _val	값
 * ex) setValue(“userName”, “홍길동”);
 */
function appSetValue(_element, _val) {
	if (bolPorted) _setValue(_element, _val);
}

/**
 * getValue	특정 저장한 값 가져오기
 * @param _element	해쉬
 * ex) var userName = getValue(“userName”);
 */
function appGetValue(_element) {
	if (bolPorted) return _getValue(_element);
}

/**
 * getValue	톡정값 값이 존재하는지 확인
 * @param _element	해쉬
 * @return true or false
 */
function appIsValue (_element) {
   if (bolPorted) return _isValue (_element);
}

//====================================================================================================//

